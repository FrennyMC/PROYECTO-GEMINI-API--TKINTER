import random

class Animal:
    _id_counter = 0 # This counter is for NEW animals created without a specific ID

    """
    Descripción:
        Clase base para representar un animal en el zoológico.
        Gestiona la información básica del animal, incluyendo su identificación,
        estado, peso, y su capacidad de ser calificado.
    """

    def __init__(self, nombre_comun, nombre_cientifico, orden, estado=None, peso=None, wiki_image_url="", animal_id=None, local_image_path="", calificacion=None):
        """
        Descripción:
            Inicializa una nueva instancia de la clase Animal.
        Entradas:
            nombre_comun (str): Nombre común del animal (ej. "León").
            nombre_cientifico (str): Nombre científico del animal (ej. "Panthera leo").
            orden (str): Tipo de orden alimenticio del animal ("carnivoro", "herbivoro", "omnivoro").
                          Solo se considera la primera letra para la clasificación ('c', 'h', 'o').
            estado (int, opcional): Estado del animal (1: Vivo, 2: Enfermo, 3: Trasladado, 4: Muerto en museo, 5: Muerto).
                                    Si no se provee, se asigna aleatoriamente entre 1 y 5.
            peso (float, opcional): Peso del animal en kg. Si no se provee, se genera aleatoriamente
                                    basado en el orden alimenticio.
            wiki_image_url (str, opcional): URL de una imagen del animal desde Wikipedia. Por defecto "".
            animal_id (str, opcional): ID único del animal. Si no se provee, se genera un nuevo ID.
            local_image_path (str, opcional): Ruta a una imagen local del animal. Por defecto "".
            calificacion (int, opcional): Calificación del animal (1-5). Por defecto None.
        Salidas:
            None
        """
        self.nombre_comun = nombre_comun
        self.nombre_cientifico = nombre_cientifico
        self.orden = self._procesar_orden(orden)
        
        # This part requires careful thought:
        # If 'animal_id' is provided (e.g., when loading from TXT_ANIMALES or pickle), use it.
        # Otherwise, generate a NEW ID.
        self.id = animal_id if animal_id is not None else self._generar_id_nuevo(nombre_comun)
        
        self.wiki_image_url = wiki_image_url 
        self.local_image_path = local_image_path # Added this as a constructor parameter
        self.calificacion = calificacion # Added this as a constructor parameter
        
        # Only generate random state/peso if they are None (not provided)
        self.estado = estado if estado is not None else self._generar_estado_aleatorio()
        self.peso = peso if peso is not None else self._generar_peso_aleatorio()

    def _procesar_orden(self, orden_str):
        """
        Descripción:
            Procesa la cadena de orden para clasificar el animal en carnívoro, herbívoro u omnívoro.
        Entradas:
            orden_str (str): Cadena de texto que representa el orden alimenticio.
        Salidas:
            str: Una de las letras 'c', 'h', 'o' que representa el orden clasificado.
        """
        orden_str = orden_str.lower()
        if orden_str.startswith("c"):
            return "c"
        elif orden_str.startswith("h"):
            return "h"
        else:
            return "o"

    def _generar_estado_aleatorio(self):
        """
        Descripción:
            Genera un estado aleatorio para el animal entre 1 y 5.
        Entradas:
            None
        Salidas:
            int: Un número entero que representa el estado del animal.
        """
        return random.randint(1, 5)

    @classmethod
    def reset_id_counter(cls):
        """
        Descripción:
            Reinicia el contador estático utilizado para generar IDs de animales.
            Útil para pruebas o cuando se necesita reiniciar la secuencia de IDs.
        Entradas:
            None
        Salidas:
            None
        """
        cls._id_counter = 0

    def _generar_id_nuevo(self, nombre):
        """
        Descripción:
            Genera un nuevo ID único para el animal basado en su nombre común y un contador interno.
            Este method is specifically for when the ID is NOT provided (e.g., a brand new animal entry).
            The InventarioManager's add_animal_to_txt uses its own logic for TXT IDs.
        Entradas:
            nombre (str): El nombre común del animal.
        Salidas:
            str: El ID generado para el animal (ej. "le01").
        """
        # It's important to understand the flow:
        # 1. When loading from TXT_ANIMALES, the ID is already present in the line.
        #    The InventarioManager passes that ID to Animal's constructor.
        # 2. When adding a *new* animal through InventarioManager.add_animal_to_txt,
        #    the ID is generated by InventarioManager (using _max_txt_animal_id)
        #    and then assigned to the Animal object *before* calling this constructor
        #    (or perhaps the Animal object is created first, then its ID is set).
        # This _generar_id_nuevo is mostly for if you create an Animal object
        # *directly* without going through InventarioManager's TXT adding logic.
        
        Animal._id_counter += 1
        inicio = nombre[0].lower() if nombre else 'x' # Handle empty name
        fin = nombre[-1].lower() if nombre else 'x' # Handle empty name
        numero = f"{Animal._id_counter:02d}"
        return f"{inicio}{fin}{numero}"

    def _generar_peso_aleatorio(self):
        """
        Descripción:
            Genera un peso aleatorio para el animal, basado en su orden alimenticio.
            Los rangos de peso son:
            - Herbívoros: 80.0 a 100.0 kg
            - Omnívoros: 0.0 a 80.0 kg
            - Carnívoros: 0.0 a 80.0 kg
        Entradas:
            None
        Salidas:
            float: El peso generado aleatoriamente para el animal, redondeado a dos decimales.
        """
        if self.orden == "h": # Herbívoros
            return round(random.uniform(80.0, 100.0), 2)
        elif self.orden == "o": # Omnívoros
            return round(random.uniform(0.0, 80.0), 2)
        else: # Carnívoros
            return round(random.uniform(0.0, 80.0), 2)

    def informacion(self):
        """
        Descripción:
            Proporciona una lista con información clave del animal.
        Entradas:
            None
        Salidas:
            list: Una lista que contiene [estado, calificación, orden, peso] del animal.
        """
        return [self.estado, self.calificacion, self.orden, self.peso]

    def nombres(self):
        """
        Descripción:
            Retorna una tupla con el nombre común y el nombre científico del animal.
        Entradas:
            None
        Salidas:
            tuple: Una tupla que contiene (nombre_comun, nombre_cientifico).
        """
        return (self.nombre_comun, self.nombre_cientifico)

    def can_be_qualified(self):
        """
        Descripción:
            Determina si un animal puede ser calificado según su estado actual.
            Los estados calificables son: 1 (vivo), 2 (enfermo), 3 (trasladado a otro zoo).
            Los estados no calificables son: 4 (muerto en museo), 5 (muerto).
        Entradas:
            None
        Salidas:
            bool: True si el animal puede ser calificado, False en caso contrario.
        """
        # Based on your InventarioDisplay logic, states 4 and 5 are explicitly
        # non-qualifiable in a general sense, but can trigger specific ratings.
        # This method broadly checks if *any* rating can be applied.
        return self.estado in [1, 2, 3, 4, 5] # All states can potentially be rated with the new logic

    def calificar(self, rating):
        """
        Descripción:
            Registra la calificación de un animal si la calificación es válida (1-5).
            No se hacen validaciones de estado aquí, eso se maneja en InventarioDisplay.
        Entradas:
            rating (int): El valor de la calificación a asignar (entero entre 1 y 5).
        Salidas:
            bool: True si la calificación fue exitosa, False en caso contrario (rating inválido).
        """
        if 1 <= rating <= 5: # Only validate the rating range here
            self.calificacion = rating
            return True
        return False

    def get_estado_text(self):
        """
        Descripción:
            Retorna la descripción textual del estado actual del animal.
        Entradas:
            None
        Salidas:
            str: Una cadena de texto describiendo el estado del animal (ej. "Vivo", "Muerto").
        """
        estados = {
            1: "Vivo",
            2: "Enfermo",
            3: "Trasladado a otro zoo",
            4: "Muerto en museo",
            5: "Muerto"
        }
        return estados.get(self.estado, "Desconocido")